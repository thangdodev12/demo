{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Thang.DoX/Desktop/nextjs-ts-antd-saga/node_modules/next/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(changeSampleFlow),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(sampleFlow),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(sampleWatcher);\n\nimport { takeEvery, call, put } from \"redux-saga/effects\";\nimport { actionTypes } from \"./constants\";\nexport function changeSampleFlow() {\n  return _regeneratorRuntime.wrap(function changeSampleFlow$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return put(sampleAction());\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function sampleFlow(action) {\n  return _regeneratorRuntime.wrap(function sampleFlow$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.t0 = action.type;\n          _context2.next = _context2.t0 === actionTypes.SAMPLE ? 3 : 6;\n          break;\n\n        case 3:\n          _context2.next = 5;\n          return call(changeSampleFlow, action);\n\n        case 5:\n          return _context2.abrupt(\"return\");\n\n        case 6:\n          return _context2.abrupt(\"break\", 7);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction sampleWatcher() {\n  return _regeneratorRuntime.wrap(function sampleWatcher$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery([], sampleFlow);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default sampleWatcher;","map":{"version":3,"sources":["/Users/Thang.DoX/Desktop/nextjs-ts-antd-saga/src/screens/Login/redux/saga.ts"],"names":["changeSampleFlow","sampleFlow","sampleWatcher","takeEvery","call","put","actionTypes","sampleAction","action","type","SAMPLE"],"mappings":";;oDAKiBA,gB;qDAIAC,U;qDAWPC,a;;AApBV,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AAGA,SAASC,WAAT;AAEA,OAAO,SAAUN,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMK,GAAG,CAACE,YAAY,EAAb,CAAT;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUN,UAAV,CAAqBO,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA,yBACGA,MAAM,CAACC,IADV;AAAA,4CAEEH,WAAW,CAACI,MAFd;AAAA;;AAAA;AAAA;AAGD,iBAAMN,IAAI,CAACJ,gBAAD,EAAmBQ,MAAnB,CAAV;;AAHC;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWP,SAAUN,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMC,SAAS,CAAC,EAAD,EAAKF,UAAL,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAeC,aAAf","sourcesContent":["import { takeEvery, call, put } from \"redux-saga/effects\";\n\nimport { Action } from \"../types\";\nimport { actionTypes } from \"./constants\";\n\nexport function* changeSampleFlow(): Generator {\n  yield put(sampleAction());\n}\n\nexport function* sampleFlow(action: Action): Generator {\n  switch (action.type) {\n    case actionTypes.SAMPLE:\n      yield call(changeSampleFlow, action);\n      return;\n\n    default:\n      break;\n  }\n}\n\nfunction* sampleWatcher(): Generator {\n  yield takeEvery([], sampleFlow);\n}\n\nexport default sampleWatcher;\n"]},"metadata":{},"sourceType":"module"}