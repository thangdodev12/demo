{"ast":null,"code":"const mockData = [{\n  name: \"ABCD1\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}, {\n  name: \"ABCD2\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}, {\n  name: \"ABCD3\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}, {\n  name: \"ABCD4\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}, {\n  name: \"ABCD5\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}, {\n  name: \"ABCD6\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}, {\n  name: \"ABCD7\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}, {\n  name: \"ABCD8\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}, {\n  name: \"ABCD9\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}, {\n  name: \"ABCD10\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}, {\n  name: \"ABCD11\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}, {\n  name: \"ABCD12\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}, {\n  name: \"ABCD13\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}, {\n  name: \"ABCD14\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}, {\n  name: \"ABCD15\",\n  email: \"abc@gmail.com\",\n  position: \"123abc, def, hcm\"\n}];\nexport default (async (req, res) => {\n  const {\n    body,\n    query: {\n      page,\n      size\n    }\n  } = req;\n\n  if (req.method === \"POST\") {\n    mockData.push(body);\n    res.send({\n      success: true\n    });\n  } else {\n    const result = mockData.splice(+page * +size, +page + 1 * +size);\n    console.log((+page - 1) * +size, +page * +size);\n    res.send({\n      info: result,\n      total: mockData.length\n    });\n  }\n});","map":{"version":3,"sources":["/Users/Thang.DoX/Desktop/nextjs-ts-antd-saga/src/pages/api/infor.ts"],"names":["mockData","name","email","position","req","res","body","query","page","size","method","push","send","success","result","splice","console","log","info","total","length"],"mappings":"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","sourcesContent":["import type { NextApiRequest, NextApiResponse } from \"next\";\n\nconst mockData = [\n  { name: \"ABCD1\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n  { name: \"ABCD2\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n  { name: \"ABCD3\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n  { name: \"ABCD4\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n  { name: \"ABCD5\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n  { name: \"ABCD6\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n  { name: \"ABCD7\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n  { name: \"ABCD8\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n  { name: \"ABCD9\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n  { name: \"ABCD10\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n  { name: \"ABCD11\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n  { name: \"ABCD12\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n  { name: \"ABCD13\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n  { name: \"ABCD14\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n  { name: \"ABCD15\", email: \"abc@gmail.com\", position: \"123abc, def, hcm\" },\n];\n\nexport default async (req: NextApiRequest, res: NextApiResponse<any> & any) => {\n  const {\n    body,\n    query: { page, size },\n  } = req;\n  if (req.method === \"POST\") {\n    mockData.push(body);\n    res.send({ success: true });\n  } else {\n    const result = mockData.splice(+page * +size, +page + 1 * +size);\n    console.log((+page - 1) * +size, +page * +size);\n    res.send({ info: result, total: mockData.length });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}