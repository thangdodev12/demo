{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { API_GET, API_DELETE, API_PATCH, API_POST, API_PUT } from \"./constants\";\nexport function* apiGetFlow(nextCtx, action) {\n  const {\n    url,\n    successAction,\n    errorAction,\n    options\n  } = action;\n\n  try {\n    const response = yield call(axios.get, `${url}/`, _objectSpread({}, options || {}));\n    if (!response) throw new Error(); // @ts-ignore\n\n    const {\n      data\n    } = response;\n    yield put(successAction({\n      data\n    }));\n  } catch (error) {\n    yield put(errorAction({\n      error\n    }));\n  }\n}\nexport function* apiPostFlow(nextCtx, action) {}\nexport function* apiPutFlow(nextCtx, action) {}\nexport function* apiPatchFlow(nextCtx, action) {}\nexport function* apiDeleteFlow(nextCtx, action) {}\nexport function* apiRequestFlow(nextCtx, action) {\n  switch (action.type) {\n    case API_GET:\n      yield call(apiGetFlow, nextCtx, action);\n      break;\n\n    case API_POST:\n      yield call(apiPostFlow, nextCtx, action);\n      break;\n\n    case API_PUT:\n      yield call(apiPutFlow, nextCtx, action);\n      break;\n\n    case API_PATCH:\n      yield call(apiPatchFlow, nextCtx, action);\n      break;\n\n    case API_DELETE:\n      yield call(apiDeleteFlow, nextCtx, action);\n      break;\n\n    default:\n      break;\n  }\n}\n\nfunction* apiRequestWatcher(nextCtx) {\n  yield takeEvery([API_GET, API_POST, API_PUT, API_PATCH, API_DELETE], apiRequestFlow, nextCtx);\n}\n\nexport default apiRequestWatcher;","map":{"version":3,"sources":["/Users/Thang.DoX/Desktop/nextjs-ts-antd-saga/src/redux/components/Api/saga.ts"],"names":["takeEvery","put","call","axios","API_GET","API_DELETE","API_PATCH","API_POST","API_PUT","apiGetFlow","nextCtx","action","url","successAction","errorAction","options","response","get","Error","data","error","apiPostFlow","apiPutFlow","apiPatchFlow","apiDeleteFlow","apiRequestFlow","type","apiRequestWatcher"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAWA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,SAA9B,EAAyCC,QAAzC,EAAmDC,OAAnD;AAEA,OAAO,UAAUC,UAAV,CAAqBC,OAArB,EAAuCC,MAAvC,EAAqE;AAC1E,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,aAAP;AAAsBC,IAAAA,WAAtB;AAAmCC,IAAAA;AAAnC,MAA0DJ,MAAhE;;AAEA,MAAI;AACF,UAAMK,QAAQ,GAAG,MAAMd,IAAI,CAACC,KAAK,CAACc,GAAP,EAAa,GAAEL,GAAI,GAAnB,oBACrBG,OAAO,IAAI,EADU,EAA3B;AAIA,QAAI,CAACC,QAAL,EAAe,MAAM,IAAIE,KAAJ,EAAN,CALb,CAOF;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAWH,QAAjB;AAEA,UAAMf,GAAG,CAACY,aAAa,CAAC;AAAEM,MAAAA;AAAF,KAAD,CAAd,CAAT;AACD,GAXD,CAWE,OAAOC,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACa,WAAW,CAAC;AAAEM,MAAAA;AAAF,KAAD,CAAZ,CAAT;AACD;AACF;AAED,OAAO,UAAUC,WAAV,CAAsBX,OAAtB,EAAwCC,MAAxC,EAAuE,CAAE;AAEhF,OAAO,UAAUW,UAAV,CAAqBZ,OAArB,EAAuCC,MAAvC,EAAqE,CAAE;AAE9E,OAAO,UAAUY,YAAV,CACLb,OADK,EAELC,MAFK,EAGM,CAAE;AAEf,OAAO,UAAUa,aAAV,CACLd,OADK,EAELC,MAFK,EAGM,CAAE;AAEf,OAAO,UAAUc,cAAV,CAAyBf,OAAzB,EAA2CC,MAA3C,EAAsE;AAC3E,UAAQA,MAAM,CAACe,IAAf;AACE,SAAKtB,OAAL;AACE,YAAMF,IAAI,CAACO,UAAD,EAAaC,OAAb,EAAsBC,MAAtB,CAAV;AACA;;AACF,SAAKJ,QAAL;AACE,YAAML,IAAI,CAACmB,WAAD,EAAcX,OAAd,EAAuBC,MAAvB,CAAV;AACA;;AACF,SAAKH,OAAL;AACE,YAAMN,IAAI,CAACoB,UAAD,EAAaZ,OAAb,EAAsBC,MAAtB,CAAV;AACA;;AACF,SAAKL,SAAL;AACE,YAAMJ,IAAI,CAACqB,YAAD,EAAeb,OAAf,EAAwBC,MAAxB,CAAV;AACA;;AACF,SAAKN,UAAL;AACE,YAAMH,IAAI,CAACsB,aAAD,EAAgBd,OAAhB,EAAyBC,MAAzB,CAAV;AACA;;AACF;AACE;AAjBJ;AAmBD;;AAED,UAAUgB,iBAAV,CAA4BjB,OAA5B,EAAyD;AACvD,QAAMV,SAAS,CACb,CAACI,OAAD,EAAUG,QAAV,EAAoBC,OAApB,EAA6BF,SAA7B,EAAwCD,UAAxC,CADa,EAEboB,cAFa,EAGbf,OAHa,CAAf;AAKD;;AAED,eAAeiB,iBAAf","sourcesContent":["import { takeEvery, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nimport { NextCtx } from \"@globalTypes\";\nimport {\n  Action,\n  GetAction,\n  PostAction,\n  PutAction,\n  PatchAction,\n  DeleteAction,\n} from \"./types\";\nimport { API_GET, API_DELETE, API_PATCH, API_POST, API_PUT } from \"./constants\";\n\nexport function* apiGetFlow(nextCtx: NextCtx, action: GetAction): Generator {\n  const { url, successAction, errorAction, options }: GetAction = action;\n\n  try {\n    const response = yield call(axios.get, `${url}/`, {\n      ...(options || {}),\n    });\n\n    if (!response) throw new Error();\n\n    // @ts-ignore\n    const { data } = response;\n\n    yield put(successAction({ data }));\n  } catch (error) {\n    yield put(errorAction({ error }));\n  }\n}\n\nexport function* apiPostFlow(nextCtx: NextCtx, action: PostAction): Generator {}\n\nexport function* apiPutFlow(nextCtx: NextCtx, action: PutAction): Generator {}\n\nexport function* apiPatchFlow(\n  nextCtx: NextCtx,\n  action: PatchAction\n): Generator {}\n\nexport function* apiDeleteFlow(\n  nextCtx: NextCtx,\n  action: DeleteAction\n): Generator {}\n\nexport function* apiRequestFlow(nextCtx: NextCtx, action: Action): Generator {\n  switch (action.type) {\n    case API_GET:\n      yield call(apiGetFlow, nextCtx, action);\n      break;\n    case API_POST:\n      yield call(apiPostFlow, nextCtx, action);\n      break;\n    case API_PUT:\n      yield call(apiPutFlow, nextCtx, action);\n      break;\n    case API_PATCH:\n      yield call(apiPatchFlow, nextCtx, action);\n      break;\n    case API_DELETE:\n      yield call(apiDeleteFlow, nextCtx, action);\n      break;\n    default:\n      break;\n  }\n}\n\nfunction* apiRequestWatcher(nextCtx: NextCtx): Generator {\n  yield takeEvery(\n    [API_GET, API_POST, API_PUT, API_PATCH, API_DELETE],\n    apiRequestFlow,\n    nextCtx\n  );\n}\n\nexport default apiRequestWatcher;\n"]},"metadata":{},"sourceType":"module"}