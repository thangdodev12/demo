{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Thang.DoX/Desktop/nextjs-ts-antd-saga/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/Thang.DoX/Desktop/nextjs-ts-antd-saga/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(apiGetFlow),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(apiPostFlow),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(apiPutFlow),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(apiPatchFlow),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(apiDeleteFlow),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(apiRequestFlow),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(apiRequestWatcher);\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { takeEvery, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { API_GET, API_DELETE, API_PATCH, API_POST, API_PUT } from \"./constants\";\nexport function apiGetFlow(nextCtx, action) {\n  var url, successAction, errorAction, options, response, data;\n  return _regeneratorRuntime.wrap(function apiGetFlow$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = action.url, successAction = action.successAction, errorAction = action.errorAction, options = action.options;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(axios.get, \"\".concat(url, \"/\"), _objectSpread({}, options || {}));\n\n        case 4:\n          response = _context.sent;\n\n          if (response) {\n            _context.next = 7;\n            break;\n          }\n\n          throw new Error();\n\n        case 7:\n          // @ts-ignore\n          data = response.data;\n          _context.next = 10;\n          return put(successAction({\n            data: data\n          }));\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 16;\n          return put(errorAction({\n            error: _context.t0\n          }));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 12]]);\n}\nexport function apiPostFlow(nextCtx, action) {\n  return _regeneratorRuntime.wrap(function apiPostFlow$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function apiPutFlow(nextCtx, action) {\n  return _regeneratorRuntime.wrap(function apiPutFlow$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function apiPatchFlow(nextCtx, action) {\n  return _regeneratorRuntime.wrap(function apiPatchFlow$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function apiDeleteFlow(nextCtx, action) {\n  return _regeneratorRuntime.wrap(function apiDeleteFlow$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\nexport function apiRequestFlow(nextCtx, action) {\n  return _regeneratorRuntime.wrap(function apiRequestFlow$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.t0 = action.type;\n          _context6.next = _context6.t0 === API_GET ? 3 : _context6.t0 === API_POST ? 6 : _context6.t0 === API_PUT ? 9 : _context6.t0 === API_PATCH ? 12 : _context6.t0 === API_DELETE ? 15 : 18;\n          break;\n\n        case 3:\n          _context6.next = 5;\n          return call(apiGetFlow, nextCtx, action);\n\n        case 5:\n          return _context6.abrupt(\"break\", 19);\n\n        case 6:\n          _context6.next = 8;\n          return call(apiPostFlow, nextCtx, action);\n\n        case 8:\n          return _context6.abrupt(\"break\", 19);\n\n        case 9:\n          _context6.next = 11;\n          return call(apiPutFlow, nextCtx, action);\n\n        case 11:\n          return _context6.abrupt(\"break\", 19);\n\n        case 12:\n          _context6.next = 14;\n          return call(apiPatchFlow, nextCtx, action);\n\n        case 14:\n          return _context6.abrupt(\"break\", 19);\n\n        case 15:\n          _context6.next = 17;\n          return call(apiDeleteFlow, nextCtx, action);\n\n        case 17:\n          return _context6.abrupt(\"break\", 19);\n\n        case 18:\n          return _context6.abrupt(\"break\", 19);\n\n        case 19:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction apiRequestWatcher(nextCtx) {\n  return _regeneratorRuntime.wrap(function apiRequestWatcher$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery([API_GET, API_POST, API_PUT, API_PATCH, API_DELETE], apiRequestFlow, nextCtx);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nexport default apiRequestWatcher;","map":{"version":3,"sources":["/Users/Thang.DoX/Desktop/nextjs-ts-antd-saga/src/redux/components/Api/saga.ts"],"names":["apiGetFlow","apiPostFlow","apiPutFlow","apiPatchFlow","apiDeleteFlow","apiRequestFlow","apiRequestWatcher","takeEvery","put","call","axios","API_GET","API_DELETE","API_PATCH","API_POST","API_PUT","nextCtx","action","url","successAction","errorAction","options","get","response","Error","data","error","type"],"mappings":";;;oDAciBA,U;qDAmBAC,W;qDAEAC,U;qDAEAC,Y;qDAKAC,a;qDAKAC,c;qDAsBPC,iB;;;;;;AArEV,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAWA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,SAA9B,EAAyCC,QAAzC,EAAmDC,OAAnD;AAEA,OAAO,SAAUf,UAAV,CAAqBgB,OAArB,EAAuCC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,UAAAA,GADH,GAC2DD,MAD3D,CACGC,GADH,EACQC,aADR,GAC2DF,MAD3D,CACQE,aADR,EACuBC,WADvB,GAC2DH,MAD3D,CACuBG,WADvB,EACoCC,OADpC,GAC2DJ,MAD3D,CACoCI,OADpC;AAAA;AAAA;AAIc,iBAAMZ,IAAI,CAACC,KAAK,CAACY,GAAP,YAAeJ,GAAf,0BACrBG,OAAO,IAAI,EADU,EAAV;;AAJd;AAIGE,UAAAA,QAJH;;AAAA,cAQEA,QARF;AAAA;AAAA;AAAA;;AAAA,gBAQkB,IAAIC,KAAJ,EARlB;;AAAA;AAUH;AACQC,UAAAA,IAXL,GAWcF,QAXd,CAWKE,IAXL;AAAA;AAaH,iBAAMjB,GAAG,CAACW,aAAa,CAAC;AAAEM,YAAAA,IAAI,EAAJA;AAAF,WAAD,CAAd,CAAT;;AAbG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAeH,iBAAMjB,GAAG,CAACY,WAAW,CAAC;AAAEM,YAAAA,KAAK;AAAP,WAAD,CAAZ,CAAT;;AAfG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBP,OAAO,SAAUzB,WAAV,CAAsBe,OAAtB,EAAwCC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEP,OAAO,SAAUf,UAAV,CAAqBc,OAArB,EAAuCC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEP,OAAO,SAAUd,YAAV,CACLa,OADK,EAELC,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,OAAO,SAAUb,aAAV,CACLY,OADK,EAELC,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,OAAO,SAAUZ,cAAV,CAAyBW,OAAzB,EAA2CC,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,yBACGA,MAAM,CAACU,IADV;AAAA,4CAEEhB,OAFF,wBAKEG,QALF,wBAQEC,OARF,wBAWEF,SAXF,yBAcED,UAdF;AAAA;;AAAA;AAAA;AAGD,iBAAMH,IAAI,CAACT,UAAD,EAAagB,OAAb,EAAsBC,MAAtB,CAAV;;AAHC;AAAA;;AAAA;AAAA;AAMD,iBAAMR,IAAI,CAACR,WAAD,EAAce,OAAd,EAAuBC,MAAvB,CAAV;;AANC;AAAA;;AAAA;AAAA;AASD,iBAAMR,IAAI,CAACP,UAAD,EAAac,OAAb,EAAsBC,MAAtB,CAAV;;AATC;AAAA;;AAAA;AAAA;AAYD,iBAAMR,IAAI,CAACN,YAAD,EAAea,OAAf,EAAwBC,MAAxB,CAAV;;AAZC;AAAA;;AAAA;AAAA;AAeD,iBAAMR,IAAI,CAACL,aAAD,EAAgBY,OAAhB,EAAyBC,MAAzB,CAAV;;AAfC;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBP,SAAUX,iBAAV,CAA4BU,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMT,SAAS,CACb,CAACI,OAAD,EAAUG,QAAV,EAAoBC,OAApB,EAA6BF,SAA7B,EAAwCD,UAAxC,CADa,EAEbP,cAFa,EAGbW,OAHa,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAeV,iBAAf","sourcesContent":["import { takeEvery, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nimport { NextCtx } from \"@globalTypes\";\nimport {\n  Action,\n  GetAction,\n  PostAction,\n  PutAction,\n  PatchAction,\n  DeleteAction,\n} from \"./types\";\nimport { API_GET, API_DELETE, API_PATCH, API_POST, API_PUT } from \"./constants\";\n\nexport function* apiGetFlow(nextCtx: NextCtx, action: GetAction): Generator {\n  const { url, successAction, errorAction, options }: GetAction = action;\n\n  try {\n    const response = yield call(axios.get, `${url}/`, {\n      ...(options || {}),\n    });\n\n    if (!response) throw new Error();\n\n    // @ts-ignore\n    const { data } = response;\n\n    yield put(successAction({ data }));\n  } catch (error) {\n    yield put(errorAction({ error }));\n  }\n}\n\nexport function* apiPostFlow(nextCtx: NextCtx, action: PostAction): Generator {}\n\nexport function* apiPutFlow(nextCtx: NextCtx, action: PutAction): Generator {}\n\nexport function* apiPatchFlow(\n  nextCtx: NextCtx,\n  action: PatchAction\n): Generator {}\n\nexport function* apiDeleteFlow(\n  nextCtx: NextCtx,\n  action: DeleteAction\n): Generator {}\n\nexport function* apiRequestFlow(nextCtx: NextCtx, action: Action): Generator {\n  switch (action.type) {\n    case API_GET:\n      yield call(apiGetFlow, nextCtx, action);\n      break;\n    case API_POST:\n      yield call(apiPostFlow, nextCtx, action);\n      break;\n    case API_PUT:\n      yield call(apiPutFlow, nextCtx, action);\n      break;\n    case API_PATCH:\n      yield call(apiPatchFlow, nextCtx, action);\n      break;\n    case API_DELETE:\n      yield call(apiDeleteFlow, nextCtx, action);\n      break;\n    default:\n      break;\n  }\n}\n\nfunction* apiRequestWatcher(nextCtx: NextCtx): Generator {\n  yield takeEvery(\n    [API_GET, API_POST, API_PUT, API_PATCH, API_DELETE],\n    apiRequestFlow,\n    nextCtx\n  );\n}\n\nexport default apiRequestWatcher;\n"]},"metadata":{},"sourceType":"module"}