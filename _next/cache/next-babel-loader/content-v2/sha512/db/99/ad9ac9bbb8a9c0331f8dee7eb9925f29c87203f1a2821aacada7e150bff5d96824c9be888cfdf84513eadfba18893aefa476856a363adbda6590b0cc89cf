{"ast":null,"code":"import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport rootSaga from \"./sagas\";\nimport rootReducer from \"./reducers\";\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers = true && false && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst configureStore = (initialState, nextCtx) => {\n  const isClient = false;\n  const store = createStore(rootReducer, initialState, composeEnhancers(applyMiddleware(sagaMiddleware)));\n\n  if (true && isClient) {\n    window.store = store;\n  }\n\n  sagaMiddleware.run(rootSaga, nextCtx);\n  return store;\n}; // @ts-ignore\n\n\nexport const wrapper = createWrapper(configureStore, {\n  debug: true\n});","map":{"version":3,"sources":["/Users/Thang.DoX/Desktop/nextjs-ts-antd-saga/src/redux/store.ts"],"names":["createStore","applyMiddleware","compose","createSagaMiddleware","createWrapper","rootSaga","rootReducer","sagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","configureStore","initialState","nextCtx","isClient","store","run","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,OAAOC,QAAP;AACA,OAAOC,WAAP;AAEA,MAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AACA,MAAMK,gBAAgB,GACnB,iBAECC,MAAM,CAACC,oCAFT,IAGAR,OAJF;;AAMA,MAAMS,cAAc,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AAChD,QAAMC,QAAQ,QAAd;AAEA,QAAMC,KAAK,GAAGf,WAAW,CACvBM,WADuB,EAEvBM,YAFuB,EAGvBJ,gBAAgB,CAACP,eAAe,CAACM,cAAD,CAAhB,CAHO,CAAzB;;AAKA,MAAI,QAA0CO,QAA9C,EAAwD;AACtDL,IAAAA,MAAM,CAACM,KAAP,GAAeA,KAAf;AACD;;AAEDR,EAAAA,cAAc,CAACS,GAAf,CAAmBX,QAAnB,EAA6BQ,OAA7B;AACA,SAAOE,KAAP;AACD,CAdD,C,CAgBA;;;AACA,OAAO,MAAME,OAAO,GAAGb,aAAa,CAACO,cAAD,EAAiB;AACnDO,EAAAA,KAAK;AAD8C,CAAjB,CAA7B","sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createWrapper } from \"next-redux-wrapper\";\n\nimport rootSaga from \"./sagas\";\nimport rootReducer from \"./reducers\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers =\n  (process.env.NODE_ENV !== \"production\" &&\n    typeof window !== \"undefined\" &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\nconst configureStore = (initialState, nextCtx) => {\n  const isClient = typeof window !== \"undefined\";\n\n  const store = createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n  );\n  if (process.env.NODE_ENV === \"development\" && isClient) {\n    window.store = store;\n  }\n\n  sagaMiddleware.run(rootSaga, nextCtx);\n  return store;\n};\n\n// @ts-ignore\nexport const wrapper = createWrapper(configureStore, {\n  debug: process.env.NODE_ENV === \"development\",\n});\n"]},"metadata":{},"sourceType":"module"}