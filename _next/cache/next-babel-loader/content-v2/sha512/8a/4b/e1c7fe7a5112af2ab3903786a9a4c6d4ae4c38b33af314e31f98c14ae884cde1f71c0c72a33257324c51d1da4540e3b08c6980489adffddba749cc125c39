{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Thang.DoX/Desktop/nextjs-ts-antd-saga/node_modules/next/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(spaceFlow),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(sampleWatcher);\n\nimport { takeEvery, put } from \"redux-saga/effects\";\nimport { getRequest } from \"../../../redux/components/Api/action\";\nimport { spaceXbase } from \"../../../services\";\nimport { spacexSuccessAction, spacexErrorAction } from \"./actions\";\nimport { actionTypes } from \"./constants\";\nexport var sampleRequestFlow = function sampleRequestFlow() {\n  console.log(spaceXbase, \"spaceXbase\");\n  return getRequest(\"\".concat(spaceXbase, \"/v4/launches/latest\"), spacexSuccessAction, spacexErrorAction);\n};\nexport function spaceFlow(action) {\n  return _regeneratorRuntime.wrap(function spaceFlow$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.t0 = action.type;\n          _context.next = _context.t0 === actionTypes.SPACE_X_REQUEST ? 3 : 6;\n          break;\n\n        case 3:\n          _context.next = 5;\n          return put(sampleRequestFlow());\n\n        case 5:\n          return _context.abrupt(\"break\", 7);\n\n        case 6:\n          return _context.abrupt(\"break\", 7);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction sampleWatcher() {\n  return _regeneratorRuntime.wrap(function sampleWatcher$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery([actionTypes.SPACE_X_REQUEST], spaceFlow);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default sampleWatcher;","map":{"version":3,"sources":["/Users/Thang.DoX/Desktop/nextjs-ts-antd-saga/src/screens/Sample/redux/saga.ts"],"names":["spaceFlow","sampleWatcher","takeEvery","put","getRequest","spaceXbase","spacexSuccessAction","spacexErrorAction","actionTypes","sampleRequestFlow","console","log","action","type","SPACE_X_REQUEST"],"mappings":";;oDAkBiBA,S;qDAWPC,a;;AA7BV,SAASC,SAAT,EAAoBC,GAApB,QAA+B,oBAA/B;AACA,SAASC,UAAT;AAEA,SAASC,UAAT;AACA,SAASC,mBAAT,EAA8BC,iBAA9B;AAEA,SAASC,WAAT;AAEA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAYN,UAAZ,EAAwB,YAAxB;AAEA,SAAOD,UAAU,WACZC,UADY,0BAEfC,mBAFe,EAGfC,iBAHe,CAAjB;AAKD,CARM;AAUP,OAAO,SAAUP,SAAV,CAAoBY,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA,wBACGA,MAAM,CAACC,IADV;AAAA,0CAEEL,WAAW,CAACM,eAFd;AAAA;;AAAA;AAAA;AAGD,iBAAMX,GAAG,CAACM,iBAAiB,EAAlB,CAAT;;AAHC;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWP,SAAUR,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMC,SAAS,CAAC,CAACM,WAAW,CAACM,eAAb,CAAD,EAAgCd,SAAhC,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAeC,aAAf","sourcesContent":["import { takeEvery, put } from \"redux-saga/effects\";\nimport { getRequest } from \"@redux/components/Api/action\";\n\nimport { spaceXbase } from \"@services\";\nimport { spacexSuccessAction, spacexErrorAction } from \"./actions\";\nimport { Action } from \"../types\";\nimport { actionTypes } from \"./constants\";\n\nexport const sampleRequestFlow = () => {\n  console.log(spaceXbase, \"spaceXbase\");\n\n  return getRequest(\n    `${spaceXbase}/v4/launches/latest`,\n    spacexSuccessAction,\n    spacexErrorAction\n  );\n};\n\nexport function* spaceFlow(action: Action): Generator {\n  switch (action.type) {\n    case actionTypes.SPACE_X_REQUEST:\n      yield put(sampleRequestFlow());\n      break;\n\n    default:\n      break;\n  }\n}\n\nfunction* sampleWatcher(): Generator {\n  yield takeEvery([actionTypes.SPACE_X_REQUEST], spaceFlow);\n}\n\nexport default sampleWatcher;\n"]},"metadata":{},"sourceType":"module"}